#####################################
# swarm에서 작동하는 docker-compose
#####################################
version: '3.8'

########################### SERVICES
services:
  wordpress:
    image: ghcr.io/hansanghyeon/wordpress-redis
    restart: always
    environment:
      WORDPRESS_DB_HOST: DB_mariadb:3306
      WORDPRESS_DB_USER: ${WORDPRESS_DB_USER}
      WORDPRESS_DB_PASSWORD: ${WORDPRESS_DB_PASSWORD}
      WORDPRESS_DB_NAME: ${WORDPRESS_DB_NAME}
      WORDPRESS_CONFIG_EXTRA: |
        /* Redis */
        define('WP_REDIS_HOST', getenv_docker('WORDPRESS_REDIS_HOST', '${TYPE}-${PROJECT_NAME}_redis'));
        define('WP_REDIS_PORT', getenv_docker('WORDPRESS_REDIS_PORT', 6379));
    volumes:
      - wordpress:/var/www/html
      - ./wp-content:/var/www/html/wp-content
      - ./src:/var/www/html/wp-content/themes/sage
    deploy:
      placement:
        constraints:
          - node.hostname == ${HOSTNAME}
      labels:
        - traefik.enable=true
        ## HTTP Routers
        - traefik.http.routers.${PROJECT_NAME}.entrypoints=websecure
        - traefik.http.routers.${PROJECT_NAME}.rule=Host(`${DOMAIN}`)
        - traefik.http.routers.${PROJECT_NAME}.tls.certresolver=leresolver
        - traefik.http.services.${PROJECT_NAME}.loadbalancer.server.port=80
  redis:
    image: redis:latest
    volumes:
      - redis:/data
    deploy:
      placement:
        constraints:
          - node.hostname == ${HOSTNAME}

########################### NETWORKS
networks:
  default:
    external:
      name: DB_net
volumes:
  redis:
  wordpress:
